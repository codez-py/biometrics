{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8410256,"sourceType":"datasetVersion","datasetId":5005409}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nfrom glob import glob\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport cv2 as cv\nfrom sklearn import metrics\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D, Input\n\n\nDATA_DIR = '/kaggle/input/casia-gei-3'\n\ngt = pd.read_csv(f'{DATA_DIR}/GaitDatasetB-gender.csv', delimiter='\\t')\n\n\ndef load_gei(f, t, angle):\n    for person_id in range(f, t):\n        ps = str(person_id).zfill(3)\n        angle = str(angle).zfill(3)\n        for file in sorted(glob(f'{DATA_DIR}/{ps}_nm-*_{angle}.png')):\n            gender = gt[gt['Subject ID'] == person_id].values[0][1]\n            img = cv.imread(file)\n            img = img.reshape((*img.shape, 1))\n            yield img, person_id, int(gender == 'F')\n\n\ndef get_features(dataset):\n    features, _, labels = [*zip(*dataset)]\n    x = np.array(features)\n    x = x.reshape(x.shape[:-1])\n    features = tf.convert_to_tensor(x / 255, dtype=tf.float32)\n    labels = tf.convert_to_tensor(labels, dtype=tf.float32)\n    return features, labels\n\n\ndef create_model():\n    model = Sequential([\n        Input((224, 224, 3)),\n        Conv2D(8, (3,3), activation='relu'),\n        MaxPool2D(),\n        Conv2D(16, (3,3), activation='relu'),\n        MaxPool2D(),\n        Conv2D(32, (3,3), activation='relu'),\n        MaxPool2D(),\n        Conv2D(64, (3,3), activation='relu'),\n        MaxPool2D(),\n        Flatten(),\n        Dense(500, activation='relu'),\n        Dense(40, activation='relu'),\n        Dense(1, activation=\"sigmoid\"),\n    ])\n\n    model.compile(optimizer='adam',\n                  loss='binary_crossentropy',\n                  metrics=['accuracy'])\n\n    return model\n\n\nangles = [90, 72, 54, 36, 18]\nepochs = 100\n\ndef train_all():\n    for angle in angles:\n        gait_dataset = list(load_gei(1, 75, angle))\n        val_dataset = list(load_gei(75, 100, angle))\n\n        features, labels = get_features(gait_dataset)\n        val_features, val_labels = get_features(val_dataset)\n\n        dataset  = tf.data.Dataset.from_tensors((features, labels))\n        val_data  = tf.data.Dataset.from_tensors((val_features, val_labels))\n\n        model = create_model()\n\n        hist = model.fit(dataset, epochs=epochs, batch_size=10, validation_data=val_data)\n\n        model.save(f'nm-{angle}.keras')\n\n        np.save(f'nm-{angle}.hist', hist.history)\n        \n\ndef test_all():\n    comp = []\n    for angle in angles:\n        test_dataset = list(load_gei(100, 125, 90))\n        test_features, test_labels = get_features(test_dataset)\n        print(f'Model trained with angle: {angle}')\n        model = load_model(f'nm-{angle}.keras')\n        yprob = model.predict(test_features)\n        ypred = yprob.flatten().round()\n\n        classes = ['M', 'F']\n        pd.DataFrame(metrics.confusion_matrix(test_labels, ypred), index=classes, columns=classes).to_csv(f'nm-{angle}-confusion.csv')\n        with open(f'nm-{angle}-report.txt', 'w') as f:\n            f.write(metrics.classification_report(test_labels, ypred))\n\n        comp.append((\n            angle,\n            metrics.accuracy_score(test_labels, ypred),\n            metrics.precision_score(test_labels, ypred),\n            metrics.recall_score(test_labels, ypred),\n            metrics.f1_score(test_labels, ypred),\n        ))\n\n    pd.DataFrame(comp, columns=['angle', 'accuracy', 'precision', 'recall', 'f1_score']).to_csv('comparison.csv', index=False)\n    print('all saved sucessfully')\n\n\ndef plot_all():\n    for angle in angles:\n        hist = np.load(f'nm-{angle}.hist.npy', allow_pickle=True).item()\n        train_loss = hist[\"loss\"]\n        val_loss = hist[\"val_loss\"]\n        train_acc = hist[\"accuracy\"]\n        val_acc = hist[\"val_accuracy\"]\n        xc = range(epochs)\n\n        plt.figure(figsize=(15, 5))\n        plt.subplot(1, 2, 1)\n        plt.plot(xc, train_loss, label=\"train\")\n        plt.plot(xc, val_loss, label=\"val\")\n        plt.xlabel(\"num of Epochs\")\n        plt.ylabel(\"loss\")\n        plt.title(f\"train_loss vs val_loss {angle} degrees\")\n        plt.grid(True)\n        plt.legend()\n\n        plt.subplot(1, 2, 2)\n        plt.plot(xc, train_acc, label=\"train\")\n        plt.plot(xc, val_acc, label=\"val\")\n        plt.xlabel(\"num of Epochs\")\n        plt.ylabel(\"accuracy\")\n        plt.title(f\"train_acc vs val_acc for {angle} degrees\")\n        plt.grid(True)\n        plt.legend()\n        plt.savefig(f\"nm-{angle}.png\")\n\n        \ndef save_zip():\n    print('!zip bio_proj.zip *.csv *.txt *.png *.npy *.keras')\n    \n\n# train_all()\n# test_all()\n# plot_all()","metadata":{"_uuid":"7782845a-6393-4972-9a44-8bcd3e4b595b","_cell_guid":"32874343-756d-4bbf-9266-2bec65e26243","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-05-14T11:59:40.260061Z","iopub.execute_input":"2024-05-14T11:59:40.260808Z","iopub.status.idle":"2024-05-14T11:59:40.292138Z","shell.execute_reply.started":"2024-05-14T11:59:40.260764Z","shell.execute_reply":"2024-05-14T11:59:40.291127Z"},"trusted":true},"execution_count":40,"outputs":[]}]}